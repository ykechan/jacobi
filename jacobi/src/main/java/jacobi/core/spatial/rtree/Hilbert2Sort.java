/* 
 * The MIT License
 *
 * Copyright 2019 Y.K. Chan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package jacobi.core.spatial.rtree;

/**
 * Spatial sorting in 2-D by Hilbert curve ordering.
 * 
 * <p>Hilbert curve is a space filing curve that in general locality is well preserved. This
 * implementation sorts spatial objects by the order of visits by the 2-D Hilbert curve.</p>
 * 
 * <p>Hilbert curve has a fractal structure that higher order curve are generated by 
 * lower order curves. Consider the following space filing curves for a 2-by-2 grid:<br>
 * <pre>
 *   A = 1---2  B = 3---2  C = 3   0  D = 1---0
 *       |   |          |      |   |      |
 *       0   3      0---1      2---1      2---3
 * </pre>
 * </p>
 * 
 * <p>To obtain a higher order curve, each cell is further divided into a 2-by-2 grid and
 * visit the sub-cells in one of the 4 curves defined. To preserve locality, the entrance
 * and exit cell should be stable to prevent "jumps". Thus if the lower order curve is A,
 * the higher order curve should enter in the lower left cell, and exit in the lower right
 * cell. A configuration for this is
 * <pre>
 *     5---6   9---10
 *     |   |   |   |           A    A
 *     4   7---8   11
 *     |           |    === 
 *     3---2  13---12          B    D    
 *         |   |
 *     0---1  14---15
 * </pre>
 * </p>
 * 
 * <p>Other lower order curve can similarly by magnified by the following configuration
 * <pre>
 * B := C  B   C := B  D   D :=  D  C 
 *      A  B        C  C         D  A
 * </pre>
 * Notice the generation is "closed" s.t. only the 4 basic curves are involved.
 * </p>
 * 
 * <p>
 * 
 * </p>
 * 
 * <p>For higher dimensional points (n &gt; 2), un-specified dimension is ignored.</p>
 * 
 * @author Y.K. Chan
 */
public class Hilbert2Sort implements SpatialSort {

	@Override
	public double[][] apply(double[][] vectors, int begin, int end) {
		
		return null;
	}

	private int xIdx, yIdx;
}
