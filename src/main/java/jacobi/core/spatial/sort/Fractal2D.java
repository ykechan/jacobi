/* 
 * The MIT License
 *
 * Copyright 2020 Y.K. Chan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package jacobi.core.spatial.sort;

import java.util.function.IntFunction;

/**
 * Fractal generation functions in 2-D to be used in Fractal sort.
 * 
 * <p>A fractal is this context is a space-filing curve with structure that is 
 * largely scale-invariant. Due to this properties, visiting order of points in 
 * a coarse scale is unchanged in a finer scale of rendering of the fractal.</p>
 * 
 * <p>The function would accept the visiting order of the current region, and
 * returns the visiting order of the partitions for (lower, lower), (lower, upper),
 * (upper, lower) and (upper, upper) in this order. The visiting order is encoded 
 * as a base-4 number with the visiting order 0, 1, 2 or 3 as coefficient of (lower, lower), 
 * (lower, upper), (upper, lower) and (upper, upper), least significant coefficient first. </p>
 * 
 * <p>For z-curve, the visiting order is (lower, upper) -&gt; (upper, upper) -&gt; (lower, lower)
 * -&gt; (upper, lower) regardless. Thus the function is a constant function
 * f(q) = 2 + 3 * 4 + 0 * 4<sup>2<sup> + 3 * 4<sup>3</sup></p>
 * 
 * <p>Hilbert curve has a fractal structure that higher order curve are generated by 
 * lower order curves. Consider the following space filing curves for a 2-by-2 grid:<br>
 * <pre>
 *   A = 1---2  B = 3---2  C = 3   0  D = 1---0
 *       |   |          |      |   |      |
 *       0   3      0---1      2---1      2---3
 * </pre>
 * </p>
 * 
 * <p>To obtain a higher order curve, each cell is further divided into a 2-by-2 grid and
 * visit the sub-cells in one of the 4 curves defined. To preserve locality, the entrance
 * and exit cell should be kept stable to prevent "jumps". Thus if the lower order curve is 
 * A, the higher order curve should enter in the lower left cell, and exit in the lower right
 * cell. A configuration for this is
 * <pre>
 *     5---6   9---10
 *     |   |   |   |           A    A
 *     4   7---8   11
 *     |           |    === 
 *     3---2  13---12          B    D    
 *         |   |
 *     0---1  14---15
 * </pre>
 * </p>
 * 
 * <p>Other lower order curve can similarly by magnified by the following configuration
 * <pre>
 * B := C  B   C := B  D   D :=  D  C 
 *      A  B        C  C         D  A
 * </pre>
 * Notice the generation is "closed" s.t. only the 4 basic curves are involved.
 * </p>
 * 
 * @author Y.K. Chan
 *
 */
public enum Fractal2D implements IntFunction<int[]> {
	/**
	 * Z-curve
	 */
	Z_CURVE {
		
		@Override
		public int[] apply(int ord) {
			return new int[] {
				Z_ORDER, Z_ORDER,
				Z_ORDER, Z_ORDER
			};
		}

		
	},
	
	/**
	 * Hilbert curve
	 */
	HILBERT {

		@Override
		public int[] apply(int ord) {			
			if(ord == 0) {
				return new int[] {
					HILBERT_A, HILBERT_A, HILBERT_A, HILBERT_A
				};
			}
			
			if(ord == HILBERT_A){
				return new int[] {
					HILBERT_A, HILBERT_B, HILBERT_A, HILBERT_D
				};
			} 
			
			if(ord == HILBERT_B){
				return new int[] {
					HILBERT_C, HILBERT_A, HILBERT_B, HILBERT_B
				};
			}
			
			if(ord == HILBERT_C){
				return new int[] {
					HILBERT_B, HILBERT_C, HILBERT_D, HILBERT_C
				};
			}
			
			if(ord == HILBERT_D){
				return new int[] {
					HILBERT_D, HILBERT_D, HILBERT_C, HILBERT_A
				};
			}

			throw new IllegalArgumentException("Unknown curve structure " + ord);
		}
		
	};
	
	protected static final int LL = 1;
	
	protected static final int LU = 4;
	
	protected static final int UL = 16;
	
	protected static final int UU = 64;
	
	protected static final int Z_ORDER = 0 * LL + 2 * LU + 1 * UL + 3 * UU;
	
	/*
	 *   A = 1---2  B = 3---2  C = 3   0  D = 1---0
     *       |   |          |      |   |      |
     *       0   3      0---1      2---1      2---3
	 */
		
	protected static final int HILBERT_A = 1 * LL + 0 * LU + 2 * UL + 3 * UU;
	
	protected static final int HILBERT_B = 3 * LL + 0 * LU + 2 * UL + 1 * UU;
	
	protected static final int HILBERT_C = 3 * LL + 2 * LU + 0 * UL + 1 * UU;
	
	protected static final int HILBERT_D = 1 * LL + 2 * LU + 0 * UL + 3 * UU;
}
